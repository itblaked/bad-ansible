---
# Bad ansible! This playbook is an example of poor/bad practices!
# Bad practices may include:
#
#   Poor formatting and structure
#   Poor use of YAML - but good enough to parse
#   Inconsistent style
#   Incorrect use of modules
#   Poor module choice
#   Unclear names
#   Hard coding / poor use of variables
#   Roles - what are roles?
#   Bare variables
#   No use of handlers


- name: Setup Frontend Servers
  hosts: frontends
  gather_facts: false # remove later! speeds up testing
  become: true
  vars:
    packages: "haproxy,tomcat"
    services:
      - haproxy
      - tomcat
  tasks:

  - name: enable repos
    template:
      src: ./open_three-tier-app.repo
      dest: /etc/yum.repos.d/open_three-tier-app.repo
      mode: 0644

  - name: Install packages
    package:
      name: "{{ packages }}"
      state: latest

  - name: Enable Services
    service:
      name: "{{ item }}"
      enabled: yes
    loop: "{{ services }}"

  - name: Place haproxy config file
    template:
      src: ./haproxy.cfg.j2
      dest: /etc/haproxy/haproxy.cfg
    notify: Restart Services

  - name: Create tomcat directories
    file:
      path: "/usr/share/tomcat/webapps/{{ item }}"
      state: directory
    loop:
      - ROOT
      - ansible

  - name: Place Tomcat index.html
    template:
      src: ./index.html.j2
      dest: "/usr/share/tomcat/webapps/{{ item }}/index.html"
      mode: 0644
    loop:
      - ROOT
      - ansible
    notify: Restart Services

  handlers:
    - name: Restart Services
      service:
        name: "{{ services }}"
        state: restarted

- name: deploy postgres
  hosts: appdbs
  gather_facts: false
  become: true
  tags: postgres
  vars:
    packages: "postgresql"
    services:
      - postgresql
  tasks:

  - name: enable repos
    template:
      src: ./open_three-tier-app.repo
      dest: /etc/yum.repos.d/open_three-tier-app.repo
      mode: 0644

  - name: Install packages
    package:
      name: "{{ packages }}"
      state: latest

  - name: Check if Postgres has been initialized
    stat:
        path: /var/lib/pgsql/data 
    register: pgsql_initialization_state

  - name: Initialize Postgres if needed
    command: postresql-setup initdb
    when: pgsql_initialization_state.stat.exists == False

  - name: Enable Services if needed
    service:
      name: "{{ item }}"
      enabled: enabled
    loop: "{{ services }}"
    when: pgsql_initialization_state.stat.exists
    notify: Restart Services

  handlers:
    - name: Enable and Restart Services
      service:
        name: "{{ services }}"
        state: restarted
